{"version":3,"sources":["hooks/reflector-material.js","hooks/usePostprocessing.js","components/three/apartmentCalcPostReflector.js","hooks/useReflector.js","components/pages/apartmentCalcPostReflectorPage.js","App.js","reportWebVitals.js","index.js"],"names":["ReflectorMaterialImpl","parameters","setValues","_flowMapOffset0","value","_flowMapOffset1","_tDiffuse","_textureMatrix","_reflectorOpacity","_tNormalMap0","_tNormalMap1","shader","uniforms","flowMapOffset0","this","flowMapOffset1","tDiffuse","tNormalMap0","tNormalMap1","textureMatrix","reflectorOpacity","vertexShader","replace","fragmentShader","v","MeshPhysicalMaterial","ReflectorMaterial","savePass","React","forwardRef","props","ref","useState","material","useTexture","baseMap","aoMap","heightMap","normalMap","roughnessMap","repeat","THREE","wrapS","wrapT","object","attach","renderTarget","texture","map","myMap","normalScale","roughness","usePostprocessing","reflectorPipeline","useThree","gl","size","scene","camera","smaa","useLoader","SMAAImageLoader","useMemo","composer","EffectComposer","frameBufferType","multisampling","renderPass","RenderPass","AOSMAA","SMAAEffect","SMAAPreset","HIGH","EdgeDetectionMode","DEPTH","edgeDetectionMaterial","setEdgeDetectionThreshold","capabilities","getRenderer","normalPass","NormalPass","depthDownsamplingPass","DepthDownsamplingPass","normalBuffer","resolutionScale","normalDepthBuffer","isWebGL2","SSAO","SSAOEffect","blendFunction","BlendFunction","MULTIPLY","depthAwareUpsampling","distanceScaling","samples","rings","distanceThreshold","distanceFalloff","rangeThreshold","rangeFalloff","luminanceInfluence","radius","intensity","bias","textureEffect","TextureEffect","SKIP","CHROMATIC_ABERRATION","ChromaticAberrationEffect","offset","BLOOM","BloomEffect","luminanceSmoothing","luminanceThreshold","NOISE","NoiseEffect","COLOR_DODGE","blendMode","opacity","SMAA","setPredicationMode","PredicationMode","setPredicationThreshold","setPredicationScale","edgesTextureEffect","renderTargetEdges","weightsTextureEffect","renderTargetWeights","effectPass","EffectPass","aoPass","chroAbbPass","forEach","pass","addPass","useEffect","setSize","width","height","useFrame","_","delta","render","extend","ShaderPass","UnrealBloomPass","SSAOPass","AparmentSceneWrapper","styled","div","backgroundColor","position","LoadingBackground","top","left","transform","display","justifyContent","alignItems","border","outline","LoaderBar","progress","StyledButton","button","paddingLeft","paddingRight","margin","borderRadius","selected","StyledButtonsWrapper","padding","StyledBlockPicker","BlockPicker","StyledPickerWrapper","flexDirection","useGLTF","preload","Apartments","group","useRef","nodes","materials","lightMapTexture","wallTexture","wallTextureRoughness","wallTextureNormal","wallMaterial","color","set","floorMaterial","roofMaterial","metalness","aoMapIntensity","backDropMaterial","emissiveIntensity","baseboardMaterial","windowFrameMaterial","flipY","lightMap","lightMapIntensity","dispose","castShadow","receiveShadow","geometry","windowFrame","windowFrame001","Apartments_base","baseBoardGeo","doorjamb","apartment_roof","backDrop","rotation","Math","PI","scale","FurnitureChest","furniture_white_polished_Material","furniture_light_wood_Material","chest_white","chest_wood","Chair","reflectivity","envMapIntensity","chair_leather_Material","chair_chrome","chair_leather","Sofa","leather","sofa_chrome","sofa_Leather","Table","glassMaterial","refractionRatio","transparent","table_glass","visible","table_metal","table_black_metal","table_legs","WallLight","light_lamp","emissive","distance","light_metal","Door","animations","actions","useAnimations","openDoor","clampWhenFinished","setLoop","closeDoor","useCallback","play","stop","doorClosed","door_wood_Material","name","door_handle_Material","door_handler","door_lock_Material","door_lock","door_handler_base","door","Environment","background","HDRCubeTextureLoader","loader","setDataType","setPath","cubeMap","gen","compileEquirectangularShader","hdrCubeRenderTarget","fromCubemap","environment","MyLight","light","shadow","mapSize","near","far","right","bottom","Logo","logo","current","x","font","parse","Roboto","FlowBox","box","y","MainScene","textureWidth","textureHeight","clipBias","meshRef","useResource","Plane","reflectorPlane","Vector3","normal","reflectorWorldPosition","cameraWorldPosition","Matrix4","rotationMatrix","lookAtPosition","Vector4","clipPlane","view","target","q","PerspectiveCamera","virtualCamera","renderer","beforeRender","setFromMatrixPosition","matrixWorld","extractRotation","applyMatrix4","subVectors","dot","reflect","negate","add","copy","up","lookAt","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","z","constant","sign","elements","w","multiplyScalar","afterRender","minFilter","LinearFilter","magFilter","format","RGBFormat","WebGLRenderTarget","encoding","outputEncoding","MathUtils","isPowerOfTwo","generateMipmaps","depthPass","DepthPass","dof","DepthOfFieldEffect","focusDistance","focalLength","bokehScale","blurPass","setDepthTexture","RGBADepthPacking","SavePass","lambdaPassBefore","LambdaPass","lambdaPassAfter","Material","useReflector","passes","fallback","rotation-x","args","clearcoat","Loader","useProgress","Html","ApartmentCalcPostReflector","setWallTexture","setColor","setBaseBoardGeo","setDoorClosed","wallpaper","tile","paint","baseBoard","baseBoardSmall","concurrent","shadowMap","alpha","antialias","fov","resize","scroll","OrbitControls","onClick","triangle","onChangeComplete","colorValue","hex","ApartmentCalcPostReflectorPage","AppWrapper","App","basename","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.824c7357.chunk.js","sourcesContent":["import { useTexture } from \"@react-three/drei\";\r\nimport React, { useState } from \"react\";\r\nimport { MeshPhysicalMaterial } from \"three\";\r\nimport * as THREE from 'three';\r\n\r\nclass ReflectorMaterialImpl extends MeshPhysicalMaterial {\r\n  _flowMapOffset0;\r\n  _flowMapOffset1;\r\n  _tDiffuse;\r\n  _textureMatrix;\r\n  _reflectorOpacity;\r\n  _tNormalMap0;\r\n  _tNormalMap1;\r\n\r\n  constructor(parameters = {}) {\r\n    super(parameters);\r\n    this.setValues(parameters);\r\n    this._flowMapOffset0 = {value: null};\r\n    this._flowMapOffset1 = {value: null};\r\n    this._tDiffuse = {value: null};\r\n    this._textureMatrix = {value: null};\r\n    this._reflectorOpacity = {value: 0.2};\r\n    this._tNormalMap0 = {value: null};\r\n    this._tNormalMap1 = {value: null};\r\n  }\r\n\r\n  onBeforeCompile(shader) {\r\n    shader.uniforms.flowMapOffset0 = this._flowMapOffset0;\r\n    shader.uniforms.flowMapOffset1 = this._flowMapOffset1;\r\n    shader.uniforms.tDiffuse = this._tDiffuse;\r\n    shader.uniforms.tNormalMap0 = this._tNormalMap0;\r\n    shader.uniforms.tNormalMap1 = this._tNormalMap1;\r\n    shader.uniforms.textureMatrix = this._textureMatrix;\r\n    shader.uniforms.reflectorOpacity = this._reflectorOpacity;\r\n\r\n    shader.vertexShader = `\r\n        uniform mat4 textureMatrix;\r\n        varying vec4 my_vUv;\r\n     \r\n      ${shader.vertexShader}\r\n    `;\r\n    shader.vertexShader = shader.vertexShader.replace(\r\n        \"#include <project_vertex>\",\r\n        `\r\n        #include <project_vertex>\r\n        my_vUv = textureMatrix * vec4( position, 1.0 );\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n        `\r\n    );\r\n\r\n    shader.fragmentShader = `\r\n        uniform sampler2D tDiffuse;\r\n        uniform float flowMapOffset0;\r\n        uniform float flowMapOffset1;\r\n        uniform float reflectorOpacity;\r\n        uniform sampler2D tNormalMap0;\r\n        uniform sampler2D tNormalMap1;\r\n        varying vec4 my_vUv;\r\n        ${shader.fragmentShader}\r\n    `;\r\n    shader.fragmentShader = shader.fragmentShader.replace(\r\n        \"#include <map_fragment>\",\r\n        `\r\n        #include <map_fragment>\r\n\r\n        float halfCycle = 1.0/2.0;\r\n        float scale = 1.0;\r\n        vec3 toEye = normalize( vec3(1.0,1.0,0.0) );\r\n        \r\n        // determine flow direction\r\n        vec2 flow = vec2(0.8,0.3);\r\n        flow.x *= - 1.0;\r\n        \r\n        // sample normal maps (distort uvs with flowdata)\r\n        vec4 normalColor0 = texture2D( tNormalMap0, ( vUv * scale ) + flow * flowMapOffset0 );\r\n        vec4 normalColor1 = texture2D( tNormalMap1, ( vUv * scale ) + flow * flowMapOffset1 );\r\n        \r\n        // linear interpolate to get the final normal color\r\n        float flowLerp = abs( halfCycle - flowMapOffset0 ) / halfCycle;\r\n        vec4 normalColor = mix( normalColor0, normalColor1, flowLerp );\r\n        \r\n        // calculate normal vector\r\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\r\n        \r\n        // calculate the fresnel term to blend reflection and refraction maps\r\n        float theta = max( dot( toEye, my_normal ), 0.0 );\r\n        float reflectance = 1.0 + ( 1.0 - 1.0 ) * pow( ( 1.0 - theta ), 5.0 );\r\n        \r\n        // calculate final uv coords\r\n        vec3 coord = my_vUv.xyz / my_vUv.w;\r\n        vec2 uv = coord.xy + coord.z * my_normal.xz * 0.05;\r\n        \r\n        vec4 myTexelRoughness = texture2D( roughnessMap, vUv );\r\n        // vec4 baseWater = texture2D( tDiffuse, uv);\r\n        vec4 base = texture2DProj( tDiffuse, my_vUv );\r\n        // vec4 mixedBase = mix(base, baseWater, myTexelRoughness.r > 0.5 ? 0.4 : 0.8);\r\n        // vec4 mixedBase = mix(base, myTexelRoughness, myTexelRoughness.r > 0.5 ? 0.2 : 0.8);\r\n        vec4 mixedBase = mix(base, base, myTexelRoughness.r > 0.5 ? 0.2 : 0.8);\r\n        mixedBase *= 1.0 - myTexelRoughness.g;\r\n        diffuseColor.rgb += reflectorOpacity * mixedBase.rgb * 1.2;\r\n      `\r\n    );\r\n  }\r\n\r\n  get flowMapOffset0() {\r\n    return this._flowMapOffset0.value;\r\n  }\r\n\r\n  set flowMapOffset0(v) {\r\n    this._flowMapOffset0.value = v;\r\n  }\r\n\r\n  get flowMapOffset1() {\r\n    return this._flowMapOffset1.value;\r\n  }\r\n\r\n  set flowMapOffset1(v) {\r\n    this._flowMapOffset1.value = v;\r\n  }\r\n\r\n  get tDiffuse() {\r\n    return this._tDiffuse.value;\r\n  }\r\n\r\n  set tDiffuse(v) {\r\n    this._tDiffuse.value = v;\r\n  }\r\n\r\n  get tNormalMap0() {\r\n    return this._tNormalMap0.value;\r\n  }\r\n\r\n  set tNormalMap0(v) {\r\n    this._tNormalMap0.value = v;\r\n  }\r\n\r\n  get tNormalMap1() {\r\n    return this._tNormalMap1.value;\r\n  }\r\n\r\n  set tNormalMap1(v) {\r\n    this._tNormalMap1.value = v;\r\n  }\r\n\r\n  get textureMatrix() {\r\n    return this._textureMatrix.value;\r\n  }\r\n\r\n  set textureMatrix(v) {\r\n    this._textureMatrix.value = v;\r\n  }\r\n\r\n  get reflectorOpacity() {\r\n    return this._reflectorOpacity.value;\r\n  }\r\n\r\n  set reflectorOpacity(v) {\r\n    this._reflectorOpacity.value = v;\r\n  }\r\n}\r\n\r\nexport const ReflectorMaterial = ({savePass, textureMatrix}) =>\r\n    React.forwardRef((props, ref) => {\r\n      const [material] = useState(() => new ReflectorMaterialImpl());\r\n\r\n      const [\r\n        baseMap,\r\n        aoMap,\r\n        heightMap,\r\n        normalMap,\r\n        roughnessMap] = useTexture([\r\n        // \"/apartment_floor_bc.jpg\", // base\r\n        \"/TexturesCom_Marble_TilesGeometric3_512_albedo.jpg\", // base\r\n        \"/ao.jpg\", // ao\r\n        \"/alpha.jpg\", // height\r\n        // \"/apartment_floor_n.jpg\", // normal\r\n        \"/TexturesCom_Marble_TilesGeometric3_512_normal.jpg\", // normal\r\n        // \"/roughness.jpg\", // roughness\r\n        \"/TexturesCom_Marble_TilesGeometric3_512_roughness.jpg\", // roughness\r\n      ]);\r\n\r\n      baseMap.repeat = roughnessMap.repeat = normalMap.repeat = new THREE.Vector2(4, 4);\r\n      baseMap.wrapS = baseMap.wrapT = normalMap.wrapT = normalMap.wrapS = roughnessMap.wrapT = roughnessMap.wrapS = THREE.RepeatWrapping;\r\n\r\n      return (\r\n          <primitive\r\n              object={material}\r\n              ref={ref}\r\n              attach=\"material\"\r\n              {...props}\r\n              textureMatrix={textureMatrix}\r\n              tDiffuse={savePass.renderTarget.texture}\r\n              // side={DoubleSide}\r\n              map={baseMap}\r\n              aoMap={aoMap}\r\n              myMap={heightMap}\r\n              // displacementMap={heightMap}\r\n              // displacementScale={0.5}\r\n              normalMap={normalMap}\r\n              normalScale={[0.1, 0.1]}\r\n              roughnessMap={roughnessMap}\r\n              roughness={0.1}\r\n              // tNormalMap0={water[0]}\r\n              // tNormalMap1={water[1]}\r\n          />\r\n      );\r\n    });\r\n","import { useFrame, useThree, useLoader } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\nimport { useEffect, useMemo } from 'react';\r\nimport {\r\n  EffectComposer,\r\n  RenderPass,\r\n  EffectPass,\r\n  BlendFunction,\r\n  ChromaticAberrationEffect,\r\n  BloomEffect,\r\n  NoiseEffect,\r\n  PredicationMode,\r\n  SMAAEffect,\r\n  SMAAImageLoader,\r\n  TextureEffect,\r\n  SSAOEffect,\r\n  NormalPass,\r\n  DepthDownsamplingPass,\r\n  SMAAPreset,\r\n  EdgeDetectionMode,\r\n} from 'postprocessing';\r\n\r\nfunction usePostprocessing(reflectorPipeline = []) {\r\n  const {gl, size, scene, camera} = useThree();\r\n  const smaa = useLoader(SMAAImageLoader);\r\n\r\n  const [composer] = useMemo(() => {\r\n    const composer = new EffectComposer(gl, {\r\n      frameBufferType: THREE.HalfFloatType,\r\n      multisampling: 0\r\n    });\r\n    const renderPass = new RenderPass(scene, camera);\r\n\r\n\r\n    const AOSMAA = new SMAAEffect(\r\n        ...smaa,\r\n        SMAAPreset.HIGH,\r\n        EdgeDetectionMode.DEPTH\r\n    );\r\n    AOSMAA.edgeDetectionMaterial.setEdgeDetectionThreshold(0.01);\r\n\r\n    const renderer = composer.getRenderer();\r\n    const capabilities = renderer.capabilities;\r\n    const normalPass = new NormalPass(scene, camera);\r\n    const depthDownsamplingPass = new DepthDownsamplingPass({\r\n      normalBuffer: normalPass.texture,\r\n      resolutionScale: 0.5\r\n    });\r\n    // depthDownsamplingPass.needsSwap = true;\r\n    // depthDownsamplingPass\r\n    const normalDepthBuffer = capabilities.isWebGL2 ?\r\n        depthDownsamplingPass.texture : null;\r\n    const SSAO = new SSAOEffect(camera, normalPass.texture, {\r\n      blendFunction: BlendFunction.MULTIPLY, // intentionally set as normal for better debugging\r\n      depthAwareUpsampling: true,\r\n      distanceScaling: true,\r\n      normalDepthBuffer,\r\n      samples: 9,\r\n      rings: 7,\r\n      distanceThreshold: 0.02, // Render up to a distance of ~20 world units\r\n      distanceFalloff: 0.0025, // with an additional ~2.5 units of falloff.\r\n      rangeThreshold: 0.003, // Occlusion proximity of ~0.3 world units\r\n      rangeFalloff: 0.001, // with ~0.1 units of falloff.\r\n      luminanceInfluence: 0.5,\r\n      radius: 0.15,\r\n      intensity: 4,\r\n      bias: 0.05,\r\n      resolutionScale: 1\r\n    });\r\n    const textureEffect = new TextureEffect({\r\n      blendFunction: BlendFunction.SKIP,\r\n      texture: depthDownsamplingPass.texture\r\n    });\r\n\r\n    const CHROMATIC_ABERRATION = new ChromaticAberrationEffect({\r\n      offset: new THREE.Vector2(0.0005, 0.0005)\r\n    });\r\n    const BLOOM = new BloomEffect({\r\n      luminanceSmoothing: 0.5,\r\n      luminanceThreshold: 0.6,\r\n      intensity: 1.5\r\n    });\r\n    const NOISE = new NoiseEffect({\r\n      blendFunction: BlendFunction.COLOR_DODGE\r\n    });\r\n    NOISE.blendMode.opacity.value = 0.03;\r\n\r\n    // INIT ANTIALIAS\r\n    const SMAA = new SMAAEffect(...smaa);\r\n    SMAA.edgeDetectionMaterial.setEdgeDetectionThreshold(0.05);\r\n    SMAA.edgeDetectionMaterial.setPredicationMode(PredicationMode.DEPTH);\r\n    SMAA.edgeDetectionMaterial.setPredicationThreshold(0.002);\r\n    SMAA.edgeDetectionMaterial.setPredicationScale(1.0);\r\n    const edgesTextureEffect = new TextureEffect({\r\n      blendFunction: BlendFunction.SKIP,\r\n      texture: SMAA.renderTargetEdges.texture\r\n    });\r\n    const weightsTextureEffect = new TextureEffect({\r\n      blendFunction: BlendFunction.SKIP,\r\n      texture: SMAA.renderTargetWeights.texture\r\n    });\r\n    // END ANTIALIAS\r\n\r\n\r\n    const effectPass = new EffectPass(camera, SMAA, edgesTextureEffect, weightsTextureEffect, BLOOM, NOISE);\r\n    const aoPass = new EffectPass(camera, AOSMAA, SSAO, textureEffect);\r\n    const chroAbbPass = new EffectPass(camera, CHROMATIC_ABERRATION);\r\n\r\n    reflectorPipeline.forEach((pass) => composer.addPass(pass));\r\n\r\n    composer.addPass(renderPass);\r\n    composer.addPass(normalPass);\r\n    composer.addPass(depthDownsamplingPass);\r\n    composer.addPass(aoPass);\r\n    composer.addPass(effectPass);\r\n    composer.addPass(chroAbbPass);\r\n\r\n    return [composer];\r\n  }, [gl, scene, camera, reflectorPipeline, smaa]);\r\n\r\n  useEffect(() => void composer.setSize(size.width, size.height), [composer, size]);\r\n  useFrame((_, delta) => void composer.render(delta), -1);\r\n}\r\n\r\nexport default usePostprocessing;\r\n","import React, {Suspense, useEffect, useState, useMemo, useRef, useCallback} from 'react';\r\nimport styled from \"styled-components\";\r\nimport { Canvas, extend, useFrame, useLoader, useThree } from \"react-three-fiber\";\r\nimport { Html, OrbitControls, Plane, useGLTF, useProgress, useTexture } from \"@react-three/drei\";\r\nimport * as THREE from \"three\";\r\nimport { SSAOPass } from \"three/examples/jsm/postprocessing/SSAOPass\";\r\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\r\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\r\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass\";\r\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\r\nimport { useReflector } from \"../../hooks/useReflector\";\r\nimport usePostprocessing from \"../../hooks/usePostprocessing\";\r\nimport { HDRCubeTextureLoader } from \"three/examples/jsm/loaders/HDRCubeTextureLoader\";\r\nimport Roboto from \"../../fonts/Roboto_Medium_Regular.json\";\r\nimport { useAnimations } from \"@react-three/drei\";\r\nimport { BlockPicker } from \"react-color\";\r\n\r\n\r\nextend({EffectComposer, ShaderPass, RenderPass, UnrealBloomPass, SSAOPass,});\r\n\r\nconst AparmentSceneWrapper = styled.div({\r\n  width: \"100%\",\r\n  height: \"800px\",\r\n  backgroundColor: \"rgb(52, 52, 52)\",\r\n  position: \"relative\",\r\n\r\n  \"@media (max-width: 480px)\": {\r\n    height: \"280px\"\r\n  }\r\n});\r\n\r\nconst LoadingBackground = styled.div({\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translateX(-50%)\",\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n  width: \"200px\",\r\n  border: \"2px solid black\",\r\n  outline: \"2px solid white\"\r\n})\r\n\r\n\r\nconst LoaderBar = styled.div(props=>({\r\n  width: `${props.progress}%`,\r\n  height: \"20px\",\r\n  backgroundColor: \"white\"\r\n}))\r\n\r\nconst StyledButton = styled.button(props=>({\r\n  height: \"40px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  margin: \"6px\",\r\n  border: \"1px solid grey\",\r\n  borderRadius: \"6px\",\r\n  backgroundColor: props.selected ? \"lightgray\" : \"white\",\r\n}))\r\n\r\nconst StyledButtonsWrapper = styled.div({\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  padding: \"6px\"\r\n})\r\n\r\nconst StyledBlockPicker = styled(BlockPicker)({\r\n  margin: \"20px\"\r\n})\r\n\r\nconst StyledPickerWrapper = styled.div({\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  flexDirection: \"column\",\r\n  width: \"220px\",\r\n  border: \"1px solid gray\",\r\n  borderRadius: \"6px\",\r\n  margin: \"12px\",\r\n})\r\n\r\n\r\nuseGLTF.preload('/baseBoardSmall.gltf');\r\n\r\nconst Apartments = (props) => {\r\n  const group = useRef();\r\n\r\n  // load gltf files (include meshes, materials and textures)\r\n  const {nodes, materials} = useGLTF('/apartments_base.gltf');\r\n\r\n  // load additional textures\r\n  const lightMapTexture = useTexture(\"/lightmap_baked.jpg\");\r\n\r\n  const wallTexture = useTexture(`${props.wallTexture}_512_albedo.jpg`);\r\n  const wallTextureRoughness = useTexture(`${props.wallTexture}_512_roughness.jpg`);\r\n  const wallTextureNormal = useTexture(`${props.wallTexture}_512_normal.jpg`);\r\n\r\n  wallTexture.wrapS = wallTexture.wrapT = wallTextureNormal.wrapT = wallTextureNormal.wrapS = wallTextureRoughness.wrapT = wallTextureRoughness.wrapS = THREE.RepeatWrapping;\r\n\r\n  useMemo(() => {\r\n    // wall\r\n    materials.wallMaterial.color.set(`${props.color}`);\r\n    materials.wallMaterial.map = wallTexture;\r\n    materials.wallMaterial.normalMap = wallTextureNormal;\r\n    materials.wallMaterial.roughnessMap = wallTextureRoughness;\r\n    materials.floorMaterial.normalScale = new THREE.Vector2(1.0, 1.0);\r\n    materials.wallMaterial.roughness = 1.0;\r\n\r\n    // roof\r\n    materials.roofMaterial.color.set(\"#949494\");\r\n    materials.roofMaterial.metalness = 0.4;\r\n    materials.roofMaterial.roughness = 0.9;\r\n    materials.roofMaterial.aoMapIntensity = 0.6;\r\n\r\n    // floor\r\n    materials.floorMaterial.normalScale = new THREE.Vector2(0.1, 0.1);\r\n    materials.floorMaterial.normalMap = null;\r\n    materials.floorMaterial.aoMapIntensity = 0.6;\r\n    // materials.floorMaterial.aoMap = null;\r\n\r\n    // backdrop\r\n    materials.backDropMaterial.color.set(\"#1f1f1f\");\r\n    materials.backDropMaterial.emissiveIntensity = 2.5;\r\n\r\n    // baseboard\r\n    materials.baseboardMaterial.color.set(\"#a58f7f\");\r\n\r\n    // window frame\r\n    materials.windowFrameMaterial.color.set(\"#b7acac\");\r\n\r\n    // lightMap settings\r\n    // lightMap uv flipped by default, need to fix it\r\n    lightMapTexture.flipY = false;\r\n\r\n    materials.wallMaterial.lightMap = lightMapTexture;\r\n    materials.wallMaterial.lightMapIntensity = 1.0;\r\n\r\n    materials.floorMaterial.lightMap = lightMapTexture;\r\n    materials.floorMaterial.lightMapIntensity = 1.0;\r\n\r\n    materials.roofMaterial.lightMap = lightMapTexture;\r\n    materials.roofMaterial.lightMapIntensity = 1.0;\r\n\r\n\r\n  }, [materials, lightMapTexture, wallTexture, wallTextureNormal, wallTextureRoughness, props.color]);\r\n\r\n  // file structure can be generated from \"npx gltfjsx filename.gltf\", it creates jsx file with\r\n  // extracted meshes and materials\r\n  return (\r\n      <group ref={group} {...props} dispose={null}>\r\n        <group position={[-1.44, 1.42, -5.08]}>\r\n          <mesh\r\n              castShadow={true}\r\n              receiveShadow={true}\r\n              material={materials.windowFrameMaterial}\r\n              geometry={nodes.windowFrame.geometry}\r\n              position={[0, 0, 0]}/>\r\n        </group>\r\n        <group position={[2.07, 1.42, -5.08]}>\r\n          <mesh\r\n              castShadow={true}\r\n              receiveShadow={true}\r\n              material={materials.windowFrameMaterial}\r\n              geometry={nodes.windowFrame001.geometry}\r\n              position={[0, 0, 0]}/>\r\n        </group>\r\n        <mesh\r\n            castShadow={true}\r\n            receiveShadow={true}\r\n            material={materials.wallMaterial}\r\n            geometry={nodes.Apartments_base.geometry}>\r\n        </mesh>\r\n        <mesh\r\n            castShadow={true}\r\n            receiveShadow={true}\r\n            material={materials.baseboardMaterial}\r\n            geometry={nodes[`${props.baseBoardGeo}`].geometry}\r\n        />\r\n        <mesh\r\n            castShadow={true}\r\n            receiveShadow={true}\r\n            material={materials.baseboardMaterial}\r\n            geometry={nodes.doorjamb.geometry}/>\r\n        <mesh\r\n            castShadow={true}\r\n            receiveShadow={true}\r\n            material={materials.roofMaterial}\r\n            geometry={nodes.apartment_roof.geometry}/>\r\n        <mesh\r\n            material={materials.backDropMaterial}\r\n            geometry={nodes.backDrop.geometry}\r\n            position={[4.2, 7.0, -60.0]}\r\n            rotation={[Math.PI / 2, 0, 0]}\r\n            scale={[2.7, 2.7, 2.7]}\r\n        />\r\n      </group>\r\n  );\r\n};\r\n\r\nconst FurnitureChest = (props) => {\r\n  const group = useRef();\r\n  const {nodes, materials} = useGLTF('/apartment_chest.gltf');\r\n\r\n  useMemo(() => {\r\n    materials.furniture_white_polished_Material.color.set(\"#5a5352\");\r\n    materials.furniture_white_polished_Material.roughness = 0.1;\r\n\r\n    materials.furniture_light_wood_Material.color.set(\"#a28e87\");\r\n  }, [materials]);\r\n\r\n\r\n  return (\r\n      <group ref={group} {...props} dispose={null}>\r\n        <mesh\r\n            castShadow={true}\r\n            receiveShadow={true}\r\n            material={materials.furniture_white_polished_Material}\r\n            geometry={nodes.chest_white.geometry}\r\n            position={[0, 0.2, 0.05]}\r\n            scale={[2.54, 2.54, 2.54]}\r\n        />\r\n        <mesh\r\n            castShadow={true}\r\n            receiveShadow={true}\r\n            material={materials.furniture_light_wood_Material}\r\n            geometry={nodes.chest_wood.geometry}\r\n            position={[-0.63, 0, 0.23]}\r\n            scale={[2.54, 2.54, 2.54]}\r\n        />\r\n      </group>\r\n  );\r\n};\r\n\r\n\r\nconst Chair = (props) => {\r\n  const group = useRef();\r\n  const {nodes, materials} = useGLTF('/chair.gltf');\r\n\r\n  const material = new THREE.MeshPhysicalMaterial({\r\n    color: \"#000000\",\r\n    roughness: 0.0,\r\n    reflectivity: 1.0,\r\n    envMapIntensity: 10.0\r\n  });\r\n\r\n  useMemo(() => {\r\n    materials.chair_leather_Material.color.set(\"#5a5352\");\r\n    materials.chair_leather_Material.roughness = 0.3;\r\n    materials.chair_leather_Material.normalScale = new THREE.Vector2(1.0, 1.0);\r\n  }, [materials]);\r\n\r\n  return (\r\n      <group ref={group} {...props} dispose={null}>\r\n        <mesh\r\n            castShadow={true}\r\n            receiveShadow={true}\r\n            material={material}\r\n            geometry={nodes.chair_chrome.geometry}\r\n            position={[-0.7, 0, 0]}/>\r\n        <mesh\r\n            material={materials.chair_leather_Material}\r\n            geometry={nodes.chair_leather.geometry}\r\n            position={[-0.7, 0, 0]}\r\n        />\r\n      </group>\r\n  );\r\n};\r\n\r\n\r\nconst Sofa = (props) => {\r\n  const group = useRef();\r\n  const {nodes} = useGLTF('/sofa.gltf');\r\n\r\n  const material = new THREE.MeshPhysicalMaterial({\r\n    color: \"#000000\",\r\n    roughness: 0.0,\r\n    reflectivity: 1.0,\r\n    envMapIntensity: 10.0\r\n  });\r\n\r\n  const leather = new THREE.MeshPhysicalMaterial({\r\n    color: \"#060606\",\r\n    roughness: 0.1,\r\n    reflectivity: 0.1,\r\n    envMapIntensity: 1.0\r\n  });\r\n\r\n  return (\r\n      <group ref={group} {...props} dispose={null}>\r\n        <mesh\r\n            castShadow={true}\r\n            receiveShadow={true}\r\n            material={material}\r\n            geometry={nodes.sofa_chrome.geometry}\r\n            position={[-0.6, 0.09, 0.03]}\r\n        />\r\n        <mesh\r\n            castShadow={true}\r\n            receiveShadow={true}\r\n            material={leather}\r\n            geometry={nodes.sofa_Leather.geometry}\r\n            position={[-0.6, 0.23, -0.14]}\r\n        />\r\n      </group>\r\n  );\r\n};\r\n\r\n\r\nconst Table = (props) => {\r\n  const group = useRef();\r\n  const {nodes, materials} = useGLTF('/table.gltf');\r\n\r\n  const glassMaterial = new THREE.MeshPhysicalMaterial({\r\n    color: \"#060606\",\r\n    roughness: 0.0,\r\n    reflectivity: 0.0,\r\n    envMapIntensity: 8.0,\r\n    refractionRatio: 0.9,\r\n    transparent: true,\r\n    opacity: 0.5\r\n  });\r\n\r\n  return (\r\n      <group ref={group} {...props} dispose={null}>\r\n        <mesh material={glassMaterial} geometry={nodes.table_glass.geometry} visible={true} position={[0, 0, 0]}/>\r\n        <mesh material={materials.table_metal} geometry={nodes.table_metal.geometry}/>\r\n        <mesh material={materials.table_black_metal} geometry={nodes.table_legs.geometry}/>\r\n      </group>\r\n  );\r\n};\r\n\r\nconst WallLight = (props) => {\r\n  const group = useRef();\r\n  const {nodes, materials} = useGLTF('/light.gltf');\r\n\r\n  useMemo(() => {\r\n    materials.light_lamp.emissive.set(\"#ffffff\");\r\n    materials.light_lamp.emissiveIntensity = 10.0;\r\n  }, [materials]);\r\n\r\n  return (\r\n      <group ref={group} {...props} dispose={null}>\r\n        <pointLight\r\n            intensity={1}\r\n            distance={1.0}\r\n            color={\"#ffe3d7\"}\r\n            position={[-0.2, 0.06, 0]}/>\r\n        />\r\n        <mesh\r\n            material={materials.light_metal}\r\n            geometry={nodes.light_metal.geometry}\r\n            position={[0, 0.21, 0]}/>\r\n        <mesh\r\n            material={materials.light_lamp}\r\n            geometry={nodes.light_lamp.geometry}\r\n            position={[-0.09, 0.06, 0]}/>\r\n      </group>\r\n  );\r\n};\r\n\r\n\r\nconst Door = (props) => {\r\n  const group = useRef();\r\n  const {nodes, materials, animations} = useGLTF('/door.gltf');\r\n  const {actions} = useAnimations(animations, group);\r\n\r\n  useEffect(() => {\r\n    actions.openDoor.clampWhenFinished = true;\r\n    actions.openDoor.clampWhenFinished = true;\r\n    actions.openDoor.setLoop(THREE.LoopOnce);\r\n    actions.closeDoor.setLoop(THREE.LoopOnce);\r\n  }, [actions.openDoor, actions.closeDoor]);\r\n\r\n  const openDoor = useCallback(()=>{\r\n    actions.openDoor.play();\r\n    actions.closeDoor.stop();\r\n  },[actions.openDoor, actions.closeDoor])\r\n\r\n  const closeDoor = useCallback(()=>{\r\n    actions.closeDoor.play();\r\n    actions.openDoor.stop();\r\n  },[actions.openDoor, actions.closeDoor])\r\n\r\n  useEffect(() => {\r\n    props.doorClosed ? openDoor() : closeDoor();\r\n  }, [props.doorClosed, openDoor, closeDoor]);\r\n\r\n\r\n  useMemo(() => {\r\n    materials.door_wood_Material.emissive.set(\"#000000\");\r\n    materials.door_wood_Material.metalness = 0.0;\r\n    materials.door_wood_Material.roughness = 1.0;\r\n    materials.door_wood_Material.reflectivity = 0.5;\r\n  }, [materials]);\r\n\r\n  return (\r\n      <group ref={group} {...props} dispose={null}>\r\n        <group position={[0, 0, 0]}>\r\n          <mesh\r\n              name=\"door_handler\"\r\n              material={materials.door_handle_Material}\r\n              geometry={nodes.door_handler.geometry}\r\n              position={[0.72, 0, 0.05]}\r\n              rotation={[-Math.PI / 2, 0, Math.PI]}\r\n          />\r\n          <mesh\r\n              material={materials.door_lock_Material}\r\n              geometry={nodes.door_lock.geometry}\r\n              position={[0.72, -0.09, 0.04]}\r\n              rotation={[Math.PI / 2, 0, 0]}\r\n          />\r\n          <mesh\r\n              material={materials.door_handle_Material}\r\n              geometry={nodes.door_handler_base.geometry}\r\n              position={[0.72, 0, 0.04]}\r\n              rotation={[Math.PI / 2, 0, 0]}\r\n          />\r\n          <mesh\r\n              material={materials.door_wood_Material}\r\n              geometry={nodes.door.geometry}\r\n              position={[0, 0, 0]}\r\n              rotation={[Math.PI / 2, 0, 0]}\r\n          />\r\n        </group>\r\n      </group>\r\n  );\r\n};\r\n\r\n\r\n// preload gltf\r\nuseGLTF.preload('/door.gltf');\r\nuseGLTF.preload('/sofa.gltf');\r\nuseGLTF.preload('/chair.gltf');\r\nuseGLTF.preload('/table.gltf');\r\nuseGLTF.preload('/light.gltf');\r\nuseGLTF.preload('/apartment_chest.gltf');\r\nuseGLTF.preload('/apartments_base.gltf');\r\n\r\n\r\nfunction Environment({background = false}) {\r\n  const {gl, scene} = useThree();\r\n  const [cubeMap] = useLoader(HDRCubeTextureLoader, [['px.hdr', 'nx.hdr', 'py.hdr', 'ny.hdr', 'pz.hdr', 'nz.hdr']], loader => {\r\n    loader.setDataType(THREE.UnsignedByteType);\r\n    loader.setPath('/hdri/');\r\n  });\r\n  useEffect(() => {\r\n    const gen = new THREE.PMREMGenerator(gl);\r\n    gen.compileEquirectangularShader();\r\n    const hdrCubeRenderTarget = gen.fromCubemap(cubeMap);\r\n    cubeMap.dispose();\r\n    gen.dispose();\r\n    if (background) scene.background = hdrCubeRenderTarget.texture;\r\n    scene.environment = hdrCubeRenderTarget.texture;\r\n    return () => (scene.environment = scene.background = null);\r\n  }, [cubeMap, scene, gl, background]);\r\n  return null;\r\n}\r\n\r\nconst MyLight = ({intensity = 1}) => {\r\n  // custom light object\r\n  const light = new THREE.DirectionalLight(0xffffff, intensity, 10);\r\n\r\n  // light settings\r\n  light.position.set(20, 20, -40);\r\n  light.castShadow = true;\r\n  light.shadow.mapSize.width = 1024;\r\n  light.shadow.mapSize.height = 1024;\r\n  // fix self shadow artifacts\r\n  light.shadow.bias = -0.0005;\r\n  light.shadow.camera.near = 1;\r\n  light.shadow.camera.far = 100;\r\n  light.shadow.camera.top = -8;\r\n  light.shadow.camera.right = 8;\r\n  light.shadow.camera.left = -8;\r\n  light.shadow.camera.bottom = 8;\r\n\r\n  return (\r\n      <>\r\n        <primitive object={light}/>\r\n      </>\r\n  );\r\n};\r\n\r\nconst Logo = (props) => {\r\n\r\n  const logo = useRef();\r\n  useFrame(() => {\r\n    logo.current.rotation.x = logo.current.rotation.x += 0.01;\r\n  });\r\n\r\n  const font = new THREE.FontLoader().parse(Roboto);\r\n  const geometry = new THREE.TextGeometry(\"GM\", {\r\n    font: font,\r\n    size: 0.8,\r\n    height: 0.2,\r\n  });\r\n  const material = new THREE.MeshStandardMaterial({\r\n    color: \"#000000\",\r\n    roughness: 0.1\r\n  });\r\n\r\n  return (\r\n      <mesh\r\n          castShadow={true}\r\n          receiveShadow={true}\r\n          {...props}\r\n          ref={logo}\r\n          geometry={geometry}\r\n          material={material}\r\n          position={[-2.94, -0.2, -2]}\r\n      >\r\n      </mesh>\r\n  );\r\n};\r\n\r\n\r\nconst FlowBox = () => {\r\n  const box = useRef();\r\n  useFrame(() => {\r\n    box.current.rotation.y = box.current.rotation.y += 0.01;\r\n  });\r\n\r\n  const geometry = new THREE.IcosahedronGeometry(0.4);\r\n  const material = new THREE.MeshStandardMaterial({\r\n    color: \"#000000\",\r\n    metalness: 0.1,\r\n    roughness: 0.0\r\n  });\r\n\r\n  return (\r\n      <mesh\r\n          castShadow={true}\r\n          receiveShadow={true}\r\n          position={[0, -0.34, 0]}\r\n          ref={box}\r\n          geometry={geometry}\r\n          material={material}\r\n      >\r\n      </mesh>\r\n  );\r\n};\r\n\r\nconst MainScene = ({wallTexture, color, baseBoardGeo, doorClosed}) => {\r\n\r\n  const [meshRef, ReflectorMaterial, passes] = useReflector();\r\n  usePostprocessing(passes);\r\n\r\n  return (\r\n      <scene>\r\n        <hemisphereLight intensity={0.8}/>\r\n        <MyLight intensity={8}/>\r\n        <Suspense fallback={\r\n          <Apartments\r\n              color={color}\r\n              wallTexture={\"TexturesCom_Fabric_SilkMedieval\"}\r\n              baseBoardGeo={baseBoardGeo}\r\n              position={[0.5, -1.4, 0.4]}\r\n          />\r\n        }>\r\n          <Apartments\r\n              color={color}\r\n              wallTexture={wallTexture}\r\n              baseBoardGeo={baseBoardGeo}\r\n              position={[0.5, -1.4, 0.4]}\r\n          />\r\n        </Suspense>\r\n        <Environment/>\r\n        <FurnitureChest position={[0.2, -1.4, 0]}\r\n                        rotation={[0, Math.PI / -2, 0]}\r\n        />\r\n        <Chair\r\n            position={[-2.2, -1.4, -1.8]}\r\n            rotation={[0, Math.PI / 4, 0]}\r\n        />\r\n        <Chair\r\n            position={[-2.8, -1.4, 0.6]}\r\n            rotation={[0, Math.PI / 2, 0]}\r\n        />\r\n        <Sofa\r\n            position={[-0.2, -1.4, 1.4]}\r\n            rotation={[0, Math.PI / -1.5, 0]}\r\n        />\r\n        <Table\r\n            position={[-2.8, -1.4, 0.0]}\r\n            rotation={[0, Math.PI / -2, 0]}\r\n        />\r\n        <WallLight\r\n            position={[-3.17, 0.4, 1.6]}\r\n            rotation={[0, Math.PI, 0]}\r\n        />\r\n        <WallLight\r\n            position={[-3.17, 0.4, -1.8]}\r\n            rotation={[0, Math.PI, 0]}\r\n        />\r\n        <Door\r\n            doorClosed={doorClosed}\r\n            position={[0.735, -0.41, 2.11]}\r\n        />\r\n        <Logo/>\r\n        <FlowBox/>\r\n        <Plane position={[0, -1.4, 0]}\r\n               receiveShadow\r\n               ref={meshRef}\r\n               rotation-x={-Math.PI / 2}\r\n               args={[12, 12, 12]}\r\n        >\r\n          <ReflectorMaterial\r\n              metalness={0.8}\r\n              roughness={0.1}\r\n              clearcoat={0.1}\r\n              reflectorOpacity={0.2}\r\n          />\r\n        </Plane>\r\n      </scene>\r\n  );\r\n};\r\n\r\n\r\nconst Loader = () => {\r\n  const {progress} = useProgress();\r\n\r\n  return (\r\n    <Html>\r\n      <LoadingBackground>\r\n        <LoaderBar progress={progress}/>\r\n      </LoadingBackground>\r\n    </Html>\r\n  );\r\n};\r\n\r\n\r\nexport const ApartmentCalcPostReflector = () => {\r\n\r\n    const [wallTexture, setWallTexture] = useState(\"TexturesCom_Fabric_SilkMedieval\");\r\n    const [color, setColor] = useState(\"#9a9a9a\");\r\n    const [baseBoardGeo, setBaseBoardGeo] = useState(\"baseBoard\");\r\n    const [doorClosed, setDoorClosed] = useState(false);\r\n\r\n\r\n    const wallpaper = \"TexturesCom_Fabric_SilkMedieval\";\r\n    const tile = \"TexturesCom_Marble_TilesGeometric3\";\r\n    const paint = \"TexturesCom_Wood_PlanksPainted2\";\r\n\r\n    const baseBoard = \"baseBoard\"\r\n    const baseBoardSmall = \"baseBoardSmall\"\r\n\r\n\r\n  const colorHandler = (colorValue) => {\r\n        setColor(colorValue.hex);\r\n      };\r\n\r\n      return (\r\n          <AparmentSceneWrapper>\r\n            <Canvas\r\n                concurrent\r\n                shadowMap\r\n                gl={{alpha: true, antialias: false}}\r\n                camera={{fov: 65}}\r\n                resize={{scroll: false}}\r\n            >\r\n              <OrbitControls/>\r\n              <Suspense fallback={<Loader/>}>\r\n                <MainScene\r\n                    wallTexture={wallTexture}\r\n                    color={color}\r\n                    baseBoardGeo={baseBoardGeo}\r\n                    doorClosed={doorClosed}\r\n                />\r\n              </Suspense>\r\n            </Canvas>\r\n            <StyledButtonsWrapper>\r\n              <StyledButton selected={wallTexture === wallpaper} onClick={() => setWallTexture(wallpaper)}>\r\n                Wallpaper\r\n              </StyledButton>\r\n              <StyledButton selected={wallTexture === tile} onClick={() => setWallTexture(tile)}>\r\n                Tile\r\n              </StyledButton>\r\n              <StyledButton selected={wallTexture === paint} onClick={() => setWallTexture(paint)}>\r\n                Paint\r\n              </StyledButton>\r\n            </StyledButtonsWrapper>\r\n            <StyledButtonsWrapper>\r\n              <StyledButton selected={baseBoardGeo === baseBoard} onClick={() => setBaseBoardGeo(baseBoard)}>\r\n                BaseBoard\r\n              </StyledButton>\r\n              <StyledButton selected={baseBoardGeo === baseBoardSmall}  onClick={() => setBaseBoardGeo(baseBoardSmall)}>\r\n                BaseBoardSmall\r\n              </StyledButton>\r\n            </StyledButtonsWrapper>\r\n            <StyledButtonsWrapper>\r\n              <StyledButton selected={doorClosed} onClick={() => setDoorClosed(!doorClosed)}>\r\n                Door\r\n              </StyledButton>\r\n            </StyledButtonsWrapper>\r\n            <StyledPickerWrapper>\r\n              <h3>Wall color</h3>\r\n              <StyledBlockPicker\r\n                triangle=\"hide\"\r\n                color={color}\r\n                onChangeComplete={colorHandler}\r\n              />\r\n            </StyledPickerWrapper>\r\n  </AparmentSceneWrapper>\r\n      );\r\n    };\r\n","import { useCallback, useMemo, useState } from \"react\";\r\nimport {\r\n  LinearFilter,\r\n  MathUtils,\r\n  Matrix4,\r\n  PerspectiveCamera,\r\n  Plane,\r\n  RGBFormat,\r\n  Vector3,\r\n  Vector4,\r\n  WebGLRenderTarget,\r\n  RGBADepthPacking,\r\n} from \"three\";\r\nimport {\r\n  SavePass,\r\n  RenderPass,\r\n  LambdaPass,\r\n  DepthPass,\r\n  EffectPass,\r\n  DepthOfFieldEffect,\r\n} from \"postprocessing\";\r\n\r\nimport { useResource, useThree } from \"react-three-fiber\";\r\nimport { ReflectorMaterial } from \"./reflector-material\";\r\n\r\nexport function useReflector(\r\n    textureWidth = 512,\r\n    textureHeight = 512,\r\n    clipBias = 0\r\n) {\r\n  const meshRef = useResource();\r\n  const [reflectorPlane] = useState(() => new Plane());\r\n  const [normal] = useState(() => new Vector3());\r\n  const [reflectorWorldPosition] = useState(() => new Vector3());\r\n  const [cameraWorldPosition] = useState(() => new Vector3());\r\n  const [rotationMatrix] = useState(() => new Matrix4());\r\n  const [lookAtPosition] = useState(() => new Vector3(0, 0, -1));\r\n  const [clipPlane] = useState(() => new Vector4());\r\n  const [view] = useState(() => new Vector3());\r\n  const [target] = useState(() => new Vector3());\r\n  const [q] = useState(() => new Vector4());\r\n  const [textureMatrix] = useState(() => new Matrix4());\r\n  const [virtualCamera] = useState(() => new PerspectiveCamera());\r\n  const { gl: renderer, scene, camera } = useThree();\r\n\r\n  const beforeRender = useCallback(\r\n      function beforeRender() {\r\n        if (!meshRef.current) return;\r\n        meshRef.current.visible = false;\r\n        reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);\r\n        cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\r\n\r\n        rotationMatrix.extractRotation(meshRef.current.matrixWorld);\r\n\r\n        normal.set(0, 0, 1);\r\n        normal.applyMatrix4(rotationMatrix);\r\n\r\n        view.subVectors(reflectorWorldPosition, cameraWorldPosition);\r\n\r\n        // Avoid rendering when reflector is facing away\r\n        if (view.dot(normal) > 0) return;\r\n\r\n        view.reflect(normal).negate();\r\n        view.add(reflectorWorldPosition);\r\n\r\n        rotationMatrix.extractRotation(camera.matrixWorld);\r\n\r\n        lookAtPosition.set(0, 0, -1);\r\n        lookAtPosition.applyMatrix4(rotationMatrix);\r\n        lookAtPosition.add(cameraWorldPosition);\r\n\r\n        target.subVectors(reflectorWorldPosition, lookAtPosition);\r\n        target.reflect(normal).negate();\r\n        target.add(reflectorWorldPosition);\r\n\r\n        virtualCamera.position.copy(view);\r\n        virtualCamera.up.set(0, 1, 0);\r\n        virtualCamera.up.applyMatrix4(rotationMatrix);\r\n        virtualCamera.up.reflect(normal);\r\n        virtualCamera.lookAt(target);\r\n\r\n        virtualCamera.far = camera.far; // Used in WebGLBackground\r\n\r\n        virtualCamera.updateMatrixWorld();\r\n        virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\r\n\r\n        // Update the texture matrix\r\n        textureMatrix.set(\r\n            0.5,\r\n            0.0,\r\n            0.0,\r\n            0.5,\r\n            0.0,\r\n            0.5,\r\n            0.0,\r\n            0.5,\r\n            0.0,\r\n            0.0,\r\n            0.5,\r\n            0.5,\r\n            0.0,\r\n            0.0,\r\n            0.0,\r\n            1.0\r\n        );\r\n        textureMatrix.multiply(virtualCamera.projectionMatrix);\r\n        textureMatrix.multiply(virtualCamera.matrixWorldInverse);\r\n        textureMatrix.multiply(meshRef.current.matrixWorld);\r\n\r\n        // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\r\n        // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\r\n        reflectorPlane.setFromNormalAndCoplanarPoint(\r\n            normal,\r\n            reflectorWorldPosition\r\n        );\r\n        reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\r\n\r\n        clipPlane.set(\r\n            reflectorPlane.normal.x,\r\n            reflectorPlane.normal.y,\r\n            reflectorPlane.normal.z,\r\n            reflectorPlane.constant\r\n        );\r\n\r\n        const projectionMatrix = virtualCamera.projectionMatrix;\r\n\r\n        q.x =\r\n            (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) /\r\n            projectionMatrix.elements[0];\r\n        q.y =\r\n            (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) /\r\n            projectionMatrix.elements[5];\r\n        q.z = -1.0;\r\n        q.w =\r\n            (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\r\n\r\n        // Calculate the scaled plane vector\r\n        clipPlane.multiplyScalar(2.0 / clipPlane.dot(q));\r\n\r\n        // Replacing the third row of the projection matrix\r\n        projectionMatrix.elements[2] = clipPlane.x;\r\n        projectionMatrix.elements[6] = clipPlane.y;\r\n        projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias;\r\n        projectionMatrix.elements[14] = clipPlane.w;\r\n      },\r\n      [\r\n        clipBias,\r\n        meshRef,\r\n        camera,\r\n        reflectorPlane,\r\n        normal,\r\n        reflectorWorldPosition,\r\n        cameraWorldPosition,\r\n        rotationMatrix,\r\n        lookAtPosition,\r\n        clipPlane,\r\n        view,\r\n        target,\r\n        q,\r\n        textureMatrix,\r\n        virtualCamera,\r\n      ]\r\n  );\r\n\r\n  function afterRender() {\r\n    if (!meshRef.current) return;\r\n    meshRef.current.visible = true;\r\n  }\r\n\r\n  const {\r\n    renderPass,\r\n    savePass,\r\n    depthPass,\r\n    blurPass,\r\n    lambdaPassBefore,\r\n    lambdaPassAfter,\r\n  } = useMemo(() => {\r\n    const parameters = {\r\n      minFilter: LinearFilter,\r\n      magFilter: LinearFilter,\r\n      format: RGBFormat,\r\n    };\r\n    const renderTarget = new WebGLRenderTarget(\r\n        textureWidth,\r\n        textureHeight,\r\n        parameters\r\n    );\r\n    renderTarget.texture.encoding = renderer.outputEncoding;\r\n\r\n    if (\r\n        !MathUtils.isPowerOfTwo(textureWidth) ||\r\n        !MathUtils.isPowerOfTwo(textureHeight)\r\n    ) {\r\n      renderTarget.texture.generateMipmaps = false;\r\n    }\r\n\r\n    const renderPass = new RenderPass(scene, virtualCamera);\r\n    const depthPass = new DepthPass(scene, virtualCamera);\r\n    const dof = new DepthOfFieldEffect(virtualCamera, {\r\n      focusDistance: 0.3,\r\n      focalLength: 0.6,\r\n      bokehScale: 3.0,\r\n    });\r\n    // temp disabled reverted AO\r\n    const blurPass = new EffectPass(dof);\r\n    // const blurPass = new EffectPass(virtualCamera, dof);\r\n    blurPass.setDepthTexture(depthPass.texture, RGBADepthPacking);\r\n\r\n    const savePass = new SavePass(renderTarget);\r\n    const lambdaPassBefore = new LambdaPass(beforeRender);\r\n    const lambdaPassAfter = new LambdaPass(afterRender);\r\n    return {\r\n      renderPass,\r\n      savePass,\r\n      lambdaPassBefore,\r\n      lambdaPassAfter,\r\n      blurPass,\r\n      depthPass,\r\n    };\r\n  }, [\r\n    textureWidth,\r\n    textureHeight,\r\n    beforeRender,\r\n    virtualCamera,\r\n    scene,\r\n    renderer.outputEncoding,\r\n  ]);\r\n\r\n  const Material = useMemo(\r\n      () => ReflectorMaterial({ savePass, textureMatrix }),\r\n      [savePass, textureMatrix]\r\n  );\r\n\r\n  return [\r\n    meshRef,\r\n    Material,\r\n    [\r\n      lambdaPassBefore,\r\n      renderPass,\r\n      depthPass,\r\n      blurPass,\r\n      savePass,\r\n      lambdaPassAfter,\r\n    ],\r\n  ];\r\n}\r\n","import React from 'react';\r\nimport { ApartmentCalcPostReflector } from \"../three/apartmentCalcPostReflector\";\r\n\r\nexport const ApartmentCalcPostReflectorPage = () => {\r\n  return <ApartmentCalcPostReflector/>;\r\n};","import styled from \"styled-components\";\nimport {BrowserRouter as Router, HashRouter, Route, Switch} from \"react-router-dom\";\nimport { ApartmentCalcPostReflectorPage } from \"./components/pages/apartmentCalcPostReflectorPage\";\n\nconst AppWrapper = styled.div`\n  margin: 40px;\n  \n  @media (max-width: 480px) {\n    margin: 0\n  }\n`;\n\nfunction App() {\n\n  return (\n    <HashRouter basename=\"/\">\n      <AppWrapper>\n        <Router>\n          <Switch>\n            <Route path=\"/\">\n              <ApartmentCalcPostReflectorPage/>\n            </Route>\n          </Switch>\n        </Router>\n      </AppWrapper>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}